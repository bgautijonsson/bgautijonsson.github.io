[
  {
    "objectID": "posts/forest-plot-table/index.html",
    "href": "posts/forest-plot-table/index.html",
    "title": "Forest Plots with Built-In Tables",
    "section": "",
    "text": "I’ve seen this kind of figure poking around, but I didn’t really think about them until the other day I was asked about how to make one in R. Here I will walk through making one of these plots using the ggplot2 and cowplot packages.\nTo start with I have some fake data, d.\n\n\nCode\nd |> \n    kable(format = \"html\") |> \n    kable_styling(full_width = F)\n\n\n\n\n \n  \n    name \n    mean \n    lower \n    upper \n  \n \n\n  \n    Covfefe \n    1.1989430 \n    1.0707825 \n    1.358700 \n  \n  \n    Coffee \n    1.8509518 \n    1.5589701 \n    2.227752 \n  \n  \n    Variable \n    1.2181512 \n    1.0834045 \n    1.411683 \n  \n  \n    Covariate \n    1.1970336 \n    1.0699671 \n    1.342737 \n  \n  \n    Predictor \n    0.9085823 \n    0.8049225 \n    1.000000 \n  \n  \n    Smoking \n    0.8770238 \n    0.7447709 \n    1.000000 \n  \n  \n    Age \n    0.9344551 \n    0.8305984 \n    1.000000 \n  \n  \n    Uranium \n    0.9177338 \n    0.8021060 \n    1.000000 \n  \n  \n    Stuff \n    1.0760010 \n    1.0000000 \n    1.216474 \n  \n  \n    Thing \n    0.9143605 \n    0.7753231 \n    1.000000 \n  \n  \n    Koffing \n    1.0686924 \n    1.0000000 \n    1.178642 \n  \n  \n    Coughing \n    1.0648236 \n    1.0000000 \n    1.194998 \n  \n  \n    Polvo \n    0.9227277 \n    0.8097846 \n    1.000000 \n  \n\n\n\n\n\n\nThe Forest Plot\nThe forest plot itself is not hard to do. Notice how I create this striped pattern with geom_vline(aes(xintercept = name), col = \"grey95\", size = 5). I’ll do the same thing to the table part of the figure later.\n\n\nCode\np1 <- d |> \n    mutate(name = fct_reorder(name, mean)) |> \n    ggplot(aes(x = name, y = mean,\n                  ymin = lower, ymax = upper)) +\n    geom_vline(aes(xintercept = name), col = \"grey95\", size = 5) +\n    geom_hline(yintercept = 1, lty = 2) +\n    geom_point() +\n    geom_linerange() +\n    coord_flip() +\n    labs(x = NULL, y = NULL) +\n    theme(plot.margin = margin(t = 5, r = -4, b = 5, l = 5))\n\np1\n\n\n\n\n\n\n\nThe Table\nTo make the table look nice I convert the numbers to text and clean them up so that the text is justified nicely when plotting it. I did some manual tuning of the margins to make the plot and table line up nicely.\n\n\nCode\np2 <- d |> \n    mutate(name = fct_reorder(name, mean),\n           mean = round(mean, 2),\n           mean = str_pad(mean, width = 4, side = \"right\", pad = \"0\"),\n           lower = round(lower, 2),\n           lower = as.character(lower),\n           lower = ifelse(lower == \"1\", \"1.00\", lower),\n           lower = str_pad(lower, width = 4, side = \"right\", pad = \"0\"),\n           upper = round(upper, 2),\n           upper = as.character(upper),\n           upper = ifelse(upper == \"1\", \"1.00\", upper),\n           upper = str_pad(upper, width = 4, side = \"right\", pad = \"0\"),\n           ci = str_c(lower, \", \", upper)) |> \n    ggplot(aes(x = name)) +\n    geom_vline(aes(xintercept = name), col = \"grey95\", size = 5) +\n    geom_text(aes(label = mean, y = 1)) +\n    geom_text(aes(label = ci, y = 1.07)) +\n    coord_flip(ylim = c(0.99, 1.1)) +\n    theme(axis.title = element_blank(),\n          axis.text = element_blank(),\n          axis.ticks = element_blank(),\n          axis.line.y = element_blank(),\n          panel.border = element_blank(), \n          panel.grid = element_blank(), \n          plot.background = element_blank(),\n          plot.margin = margin(t = 5, r = 5, b = 19.3, l = 0))\n\np2\n\n\n\n\n\n\nThe finished bottom row\nNow we have alligned the plot and table. If you zoom in you might see that they don’t line up perfectly. I am not liable for any bodily harm caused by this.\n\n\nCode\nbottom_row <- plot_grid(p1, p2, nrow = 1, rel_widths = c(1, 0.3)) \n\nbottom_row\n\n\n\n\n\n\n\n\nThe headers\nI admit that this is a pretty handwavy manual way to make the header fit, and there is probably a nice way to automatically fit this using the coordinate system.\n\n\nCode\ntop_row <- ggplot(data = tibble()) +\n    geom_text(aes(y = 1, x = 0.02, label = \"Variable\"), size = 5) +\n    geom_text(aes(y = 1, x = 0.84, label = \"Mean\"), size = 5) +\n    geom_text(aes(y = 1, x = 0.98, label = \"95% CI\"), size = 5) +\n    coord_cartesian(xlim = c(0, 1)) +\n    theme_void() +\n    theme(plot.margin = margin(t = 0, r = 5, b = 0, l = 5),\n          axis.line.x.bottom = element_line())\n\n\ntop_row\n\n\n\n\n\n\n\nPutting it all together\nAnd so we come to the finished plot. If we wrangle the rel_heights setting a little bit we can get a pretty nice looking forest plot and table hybrid.\n\n\nCode\nplot_grid(top_row, bottom_row, ncol = 1, rel_heights = c(0.07, 1))\n\n\n\n\n\nThis was actually less of an inconvenience than I thought. The mixture of ggplot2 and cowplot made this a pretty easy task."
  },
  {
    "objectID": "phd/articles/results/max/index.html",
    "href": "phd/articles/results/max/index.html",
    "title": "The Max Step",
    "section": "",
    "text": "\\[\n\\mathrm{GEV(y|\\mu, \\sigma, \\xi)} = \\begin{cases}\ne^{- \\left(1 + \\xi \\frac{y - \\mu}{\\sigma}\\right)_+^{-1/\\xi}}, \\xi\\neq0 \\\\\ne^{- e^{- \\frac{y - \\mu}{\\sigma}\n}}, \\xi=0\n\\end{cases}\n\\]\nIn our case we want \\(\\mu\\) to vary with time. If we write \\(y_{it}\\) for the observed hourly maximum at station \\(i\\) during year \\(t\\) we will then have\n\\[\ny_{it} \\sim \\mathrm{GEV}(\\mu_{it}, \\sigma_i, \\xi_i), \\quad \\mu_{it}, \\sigma_i > 0, \\quad \\xi_i \\in (-0.5, 0.5),\n\\]\nwhere\n\\[\n\\mu_{it} = \\mu_i \\cdot (1 + \\Delta_i \\cdot (t - t_0)),\n\\]\nand\n\\[\n1 + \\xi_i \\frac{y_{it} - \\mu_{it}}{\\sigma_i} > 0, \\quad \\forall i, t.\n\\]"
  },
  {
    "objectID": "phd/articles/results/max/index.html#transformed-parameters",
    "href": "phd/articles/results/max/index.html#transformed-parameters",
    "title": "The Max Step",
    "section": "Transformed parameters",
    "text": "Transformed parameters\nHaving performed the Max step and saved the ML estimates we can easily load them by fetching the object station_estimates. Here we plot the distribution of transformed estimates.\n\\[\n\\begin{aligned}\n\\psi &= \\log(\\mu) \\\\\n\\tau &= \\log(\\frac{\\sigma}{\\mu}) = \\log(\\sigma) - \\log(\\mu) \\\\\n\\phi &= \\mathrm{logit}(\\xi, \\text{ scale}=1.6) - 0.8 \\\\\n\\gamma &= \\mathrm{logit}(\\Delta, \\text{ scale}=0.02) - 0.01.\n\\end{aligned}\n\\]\nThese transformations make it so that \\(\\xi\\) can take values between \\(-0.8\\) and \\(0.8\\), and \\(\\Delta\\) can take values between \\(-0.01\\) and \\(0.01\\)."
  },
  {
    "objectID": "phd/articles/results/max/index.html#distributions",
    "href": "phd/articles/results/max/index.html#distributions",
    "title": "The Max Step",
    "section": "Distributions",
    "text": "Distributions\n\nTransformed Scale\n\n\nCode\nd |> \n  ggplot(aes(value)) +\n  geom_histogram(bins = 60) +\n  facet_wrap(\"name\", scales = \"free\") +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Distributions of GEV parameters from Max step\"\n  )\n\n\n\n\n\n\n\nCode\nd |> \n  pivot_wider() |> \n  select(-station, -proj_x, -proj_y) |> \n  ggpairs(progress = FALSE)\n\n\n\n\n\n\n\nOriginal Scale\n\n\nCode\nd |> \n  pivot_wider() |> \n  mutate(mu = exp(psi),\n         sigma = exp(tau + psi),\n         xi = link_shape_inverse(phi),\n         delta = link_trend_inverse(gamma)) |> \n  select(-psi, -tau, -phi, -gamma, -proj_x, -proj_y) |> \n  pivot_longer(c(-station)) |> \n  mutate(name = fct_relevel(name, \"mu\", \"sigma\", \"xi\", \"delta\")) |> \n  ggplot(aes(value)) +\n  geom_histogram(bins = 100) +\n  facet_wrap(\"name\", scales = \"free\") +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Distributions of backtransformed GEV parameters from Max step\"\n  )\n\n\n\n\n\n\n\nCode\nd |> \n  pivot_wider() |> \n  mutate(mu = exp(psi),\n         sigma = exp(tau + psi),\n         xi = link_shape_inverse(phi),\n         delta = link_trend_inverse(gamma)) |> \n  select(-psi, -tau, -phi, -gamma, -station, -proj_x, -proj_y) |> \n  ggpairs(progress = FALSE)"
  },
  {
    "objectID": "phd/articles/results/max/index.html#spatial-distribution",
    "href": "phd/articles/results/max/index.html#spatial-distribution",
    "title": "The Max Step",
    "section": "Spatial Distribution",
    "text": "Spatial Distribution\n\nLocation\n\n\nCode\nd |> \n  filter(name == \"psi\") |> \n  ggplot(aes(proj_x, proj_y, fill = value)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Psi\"\n  )\n\n\n\n\n\n\n\nCode\nd |> \n  filter(name == \"psi\") |> \n  ggplot(aes(proj_x, proj_y, fill = exp(value))) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Mu\"\n  )\n\n\n\n\n\n\n\nScale\n\n\nCode\nd |> \n  filter(name == \"tau\") |> \n  ggplot(aes(proj_x, proj_y, fill = value)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Tau\"\n  )\n\n\n\n\n\n\n\nCode\nd |> \n  pivot_wider() |> \n  mutate(sigma = exp(tau + psi)) |> \n  ggplot(aes(proj_x, proj_y, fill = sigma)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Sigma\"\n  )\n\n\n\n\n\n\n\nShape\n\n\nCode\nd |> \n  filter(name == \"phi\") |> \n  ggplot(aes(proj_x, proj_y, fill = value)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Phi\"\n  )\n\n\n\n\n\n\n\nCode\nd |> \n  pivot_wider() |> \n  mutate(xi = link_shape_inverse(phi)) |> \n  ggplot(aes(proj_x, proj_y, fill = xi)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Xi\"\n  )\n\n\n\n\n\n\n\nTrend\n\n\nCode\nd |> \n  filter(name == \"gamma\") |> \n  ggplot(aes(proj_x, proj_y, fill = value)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Gamma\"\n  )\n\n\n\n\n\n\n\nCode\nd |> \n  pivot_wider() |> \n  mutate(delta = link_trend_inverse(gamma)) |> \n  ggplot(aes(proj_x, proj_y, fill = delta)) +\n  geom_raster(interpolate = TRUE) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_x), pretty(d$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(d$proj_y), pretty(d$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = NULL,\n    title = \"Spatial distribution of Delta\"\n  )"
  },
  {
    "objectID": "phd/articles/results/spatial/index.html",
    "href": "phd/articles/results/spatial/index.html",
    "title": "The Smooth Step",
    "section": "",
    "text": "Code\nlibrary(bggjphd)\nlibrary(tidyverse)\nlibrary(bayesplot)\nlibrary(GGally)\nlibrary(scales)\nlibrary(cowplot)\nlibrary(kableExtra)\nlibrary(arrow)\ntheme_set(theme_bggj())\nThe latent parameters, \\(\\psi\\), \\(\\tau\\), \\(\\phi\\), and \\(\\gamma\\), are given intrinsic random walk spatial priors, for example\n\\[\n\\begin{aligned}\n\\psi &\\sim \\mathcal N(\\mathbf 0, \\tau_\\psi \\cdot Q_u) \\\\\n\\sigma_\\psi &= \\frac{1}{\\sqrt\\tau_\\psi} \\\\\n\\sigma_\\psi &\\sim \\mathrm{Exp}(1)\n\\end{aligned}\n\\]\nHere, \\(Q_u\\) is defined by\n\\[\nQ_u = R \\otimes I + I \\otimes R,\n\\]\nwhere \\(I\\) is the identity matrix and\n\\[\nR = \\begin{bmatrix}\n1 & -1 & & & & & \\\\\n-1 & 2 & -1 & & & & \\\\\n& -1 & 2 & -1 & & & \\\\\n& & \\ddots & \\ddots & \\ddots & & \\\\\n& & &-1 &2 &-1 & \\\\\n& & & & -1 & 1\\\\\n\\end{bmatrix}.\n\\]\nThe results were obtained by running ms_smooth() in parrallel on four cores with four chains each run for 4000 samples. Half of those samples were designated as warm-up and so we have a total of 8000 samples from the posterior."
  },
  {
    "objectID": "phd/articles/results/spatial/index.html#trace-plots",
    "href": "phd/articles/results/spatial/index.html#trace-plots",
    "title": "The Smooth Step",
    "section": "Trace plots",
    "text": "Trace plots\n\n\nCode\ntheta_results |> \n  filter(.iteration > 2000) |>\n  mcmc_trace()"
  },
  {
    "objectID": "phd/articles/results/spatial/index.html#autocorrelation-functions",
    "href": "phd/articles/results/spatial/index.html#autocorrelation-functions",
    "title": "The Smooth Step",
    "section": "Autocorrelation functions",
    "text": "Autocorrelation functions\n\n\nCode\ntheta_results |> \n  filter(.iteration > 2000) |> \n  mcmc_acf_bar()"
  },
  {
    "objectID": "phd/articles/results/spatial/index.html#acceptance-probability",
    "href": "phd/articles/results/spatial/index.html#acceptance-probability",
    "title": "The Smooth Step",
    "section": "Acceptance probability",
    "text": "Acceptance probability\n\n\nCode\ntheta_results |> \n  subset_draws(\"theta[1]\") |> \n  as_tibble() |> \n  rename(value = \"theta[1]\") |> \n  group_by(.chain) |> \n  mutate(accept = 1 * (value != lag(value))) |> \n  ungroup() |> \n  ggplot(aes(.iteration, accept, group = .chain)) +\n  geom_smooth(method = \"loess\", span = 0.3, se = 0) +\n  scale_x_continuous(\n    expand = expansion()\n  ) +\n  scale_y_continuous(\n    breaks = pretty_breaks(5),\n    labels = label_percent(),\n    expand = expansion()\n  ) +\n  theme(\n    plot.margin = margin(t = 5, r = 35, b = 5, l = 5)\n  ) +  \n  coord_cartesian(ylim = c(0, 1)) +\n  labs(\n    x = \"Iteration\",\n    y = \"Acceptance probability\",\n    title = \"Acceptance probability for theta[1]\"\n  )"
  },
  {
    "objectID": "phd/articles/results/spatial/index.html#hyperpriors",
    "href": "phd/articles/results/spatial/index.html#hyperpriors",
    "title": "The Smooth Step",
    "section": "Hyperpriors",
    "text": "Hyperpriors\n\nLog precision scale\n\n\nCode\ntheta_results |> \n  filter(.iteration > 2000) |> \n  summarise_draws() |> \n  kable(digits = 3) |> \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\n\n \n  \n    variable \n    mean \n    median \n    sd \n    mad \n    q5 \n    q95 \n    rhat \n    ess_bulk \n    ess_tail \n  \n \n\n  \n    theta[1] \n    6.197 \n    6.197 \n    0.018 \n    0.017 \n    6.169 \n    6.228 \n    1.057 \n    74.104 \n    175.051 \n  \n  \n    theta[2] \n    5.227 \n    5.228 \n    0.021 \n    0.022 \n    5.192 \n    5.261 \n    1.025 \n    108.293 \n    268.148 \n  \n  \n    theta[3] \n    3.559 \n    3.559 \n    0.022 \n    0.022 \n    3.523 \n    3.597 \n    1.021 \n    145.799 \n    225.786 \n  \n  \n    theta[4] \n    4.947 \n    4.948 \n    0.034 \n    0.035 \n    4.891 \n    5.001 \n    1.015 \n    116.061 \n    249.864 \n  \n\n\n\n\n\n\n\nCode\ntheta_results |> \n  filter(.iteration > 2000) |> \n  mcmc_hist_by_chain(\n  )\n\n\n\n\n\n\n\nOn standard deviation scale\n\n\nCode\ntheta_results |> \n  filter(.iteration > 2000) |> \n  summarise_draws() |> \n  kable(digits = 3) |> \n  kable_styling(bootstrap_options = c(\"striped\", \"hover\"))\n\n\n\n\n \n  \n    variable \n    mean \n    median \n    sd \n    mad \n    q5 \n    q95 \n    rhat \n    ess_bulk \n    ess_tail \n  \n \n\n  \n    theta[1] \n    6.197 \n    6.197 \n    0.018 \n    0.017 \n    6.169 \n    6.228 \n    1.057 \n    74.104 \n    175.051 \n  \n  \n    theta[2] \n    5.227 \n    5.228 \n    0.021 \n    0.022 \n    5.192 \n    5.261 \n    1.025 \n    108.293 \n    268.148 \n  \n  \n    theta[3] \n    3.559 \n    3.559 \n    0.022 \n    0.022 \n    3.523 \n    3.597 \n    1.021 \n    145.799 \n    225.786 \n  \n  \n    theta[4] \n    4.947 \n    4.948 \n    0.034 \n    0.035 \n    4.891 \n    5.001 \n    1.015 \n    116.061 \n    249.864 \n  \n\n\n\n\n\n\n\nCode\ntheta_results |> \n  filter(.iteration > 2000) |> \n  mcmc_hist_by_chain(\n    transformations = function(x) exp(-x/2)\n  )"
  },
  {
    "objectID": "phd/articles/results/spatial/index.html#gev-parameters",
    "href": "phd/articles/results/spatial/index.html#gev-parameters",
    "title": "The Smooth Step",
    "section": "GEV Parameters",
    "text": "GEV Parameters\n\nComparing ML and MCMC estimates\n\n\nCode\nstation_results |> \n  pivot_longer(c(ml_estimate, mcmc_mean)) |> \n  mutate(\n    variable = fct_relevel(\n      factor(variable),\n      \"psi\", \"tau\", \"phi\", \"gamma\"\n    ),\n    name = fct_recode(\n      factor(name),\n      \"Maximum Likelihood\" = \"ml_estimate\",\n      \"Posterior Mean\" = \"mcmc_mean\"\n    )\n  ) |> \n  ggplot(aes(value)) +\n  geom_histogram() +\n  facet_wrap(vars(variable, name), ncol = 2, scales = \"free_x\") +\n  theme(\n    axis.line.y = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank()\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Distributions of station parameters from ML and MCMC\"\n  )\n\n\n\n\n\n\n\nCode\nstation_results |> \n  ggplot(aes(ml_estimate, mcmc_mean)) +\n  geom_abline(intercept = 0, slope = 1, lty = 2) +\n  geom_point(alpha = 0.1) +\n  facet_wrap(\"variable\", scales = \"free\") +\n  labs(\n    x = \"ML Estimate (Max step)\",\n    y = \"Posterior Mean (Smooth step)\",\n    title = \"Comparing estimates from the Max and the Smooth steps\"\n  )\n\n\n\n\n\n\n\nSpatial Distributions\n\n\nCode\nproj_plot <- function(data) {\n  \n  title <- str_c(\n    \"Spatial distribution of estimates for \", unique(data$variable)\n  )\n  \n  plot_dat <- data |> \n    pivot_longer(c(ml_estimate, mcmc_mean)) |> \n    mutate(\n      name = fct_recode(\n        factor(name),\n        \"Maximum Likelihood\" = \"ml_estimate\",\n        \"Posterior Mean\" = \"mcmc_mean\"\n      )\n    ) |> \n    group_by(name) |> \n    mutate(\n      value = (value - mean(value)) / sd(value)\n    ) |> \n    ungroup() |> \n    mutate(\n      value = case_when(\n        name == \"Posterior Mean\" ~ value,\n        value < quantile(value, 0.0025) ~ quantile(value, 0.0025),\n        value > quantile(value, 0.9975) ~ quantile(value, 0.9975),\n        TRUE ~ value\n      )\n    )\n  \n  min_val <- min(plot_dat$value)\n  max_val <- max(plot_dat$value)\n  \n  lim_range <- max(abs(min_val), abs(max_val))\n  \n  limits <- c(-1, 1) * lim_range\n  \n  plot_dat |> \n    ggplot(aes(proj_x, proj_y)) +\n    geom_raster(aes(fill = value)) +\n    scale_fill_viridis_c(limits = limits) +\n    facet_wrap(\"name\", nrow = 1) +\n    coord_cartesian(expand = FALSE) +\n    labs(\n      title = title,\n      fill = NULL,\n      x = \"X projection\",\n      y = \"Y projection\"\n    )\n}\n\n\n\nLocation\n\npsi\n\n\nCode\nstation_results |> \n  filter(variable == \"psi\") |> \n  proj_plot()\n\n\n\n\n\n\n\nmu\n\n\nCode\nstation_results |> \n  filter(variable == \"psi\") |> \n  mutate(variable = \"mu\") |> \n  mutate_at(vars(ml_estimate, mcmc_mean), exp) |> \n  proj_plot()\n\n\n\n\n\n\n\n\nScale\n\ntau\n\n\nCode\nstation_results |> \n  filter(variable == \"tau\") |> \n  proj_plot()\n\n\n\n\n\n\n\nsigma\n\n\nCode\nstation_results |> \n  filter(variable %in% c(\"tau\", \"psi\")) |> \n  pivot_longer(c(ml_estimate, mcmc_mean)) |> \n  pivot_wider(names_from = variable, values_from = value) |> \n  mutate(sigma = exp(tau + psi)) |> \n  select(-psi, -tau) |> \n  pivot_longer(c(sigma), names_to = \"variable\", values_to = \"value\") |> \n  pivot_wider() |> \n  proj_plot()\n\n\n\n\n\n\n\n\nShape\n\nphi\n\n\nCode\nstation_results |> \n  filter(variable == \"phi\") |> \n  proj_plot()\n\n\n\n\n\n\n\nxi\n\n\nCode\nstation_results |> \n  filter(variable == \"phi\") |> \n  mutate(variable = \"xi\") |> \n  mutate_at(vars(ml_estimate, mcmc_mean), link_shape_inverse) |> \n  proj_plot()\n\n\n\n\n\n\n\n\nTrend\n\ngamma\n\n\nCode\nstation_results |> \n  filter(variable == \"gamma\") |> \n  proj_plot()\n\n\n\n\n\n\n\nDelta\n\n\nCode\nstation_results |> \n  filter(variable == \"gamma\") |> \n  mutate(variable = \"delta\") |> \n  mutate_at(vars(ml_estimate, mcmc_mean), link_trend_inverse) |> \n  proj_plot()"
  },
  {
    "objectID": "phd/articles/data/ukcp/index.html",
    "href": "phd/articles/data/ukcp/index.html",
    "title": "UKCP Data",
    "section": "",
    "text": "Code\nlibrary(bggjphd)\nlibrary(tidyverse)\nlibrary(GGally)\nlibrary(cowplot)\nlibrary(glue)\ntheme_set(theme_bggj())"
  },
  {
    "objectID": "phd/articles/data/ukcp/index.html#maximum-precipitation",
    "href": "phd/articles/data/ukcp/index.html#maximum-precipitation",
    "title": "UKCP Data",
    "section": "Maximum precipitation",
    "text": "Maximum precipitation\n\n\nCode\np <- full_data |> \n  ggplot(aes(max_precip, y = after_stat(density))) +\n  geom_histogram(bins = 100) +\n  scale_x_continuous(\n    limits = c(0, NA),\n    expand = expansion()\n  ) +\n  scale_y_continuous(\n    expand = expansion()\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Distribution of station-wise maximum precipitation over the period\"\n  )\n\nggsave(\n  plot = p,\n  filename = \"Figures/figure1.png\",\n  width = 8, height = 0.621 * 8, scale = 1.3\n)\n\n\n\n\n\nCode\np <- full_data |> \n  ggplot(aes(proj_x, proj_y, fill = max_precip)) +\n  geom_raster(\n    interpolate = TRUE\n  ) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(full_data$proj_x), pretty(full_data$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(full_data$proj_y), pretty(full_data$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  theme(\n    plot.margin = margin(t = 5, r = 25, b = 5, l = 5)\n  ) +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = \"Maximum Precipitation\",\n    title = \"Spatial distribution of maximum precipitation\"\n  )\n\nggsave(\n  plot = p,\n  filename = \"Figures/figure2.png\",\n  width = 8, height = 0.621 * 8, scale = 1.3\n)"
  },
  {
    "objectID": "phd/articles/data/ukcp/index.html#minimum-precipitation",
    "href": "phd/articles/data/ukcp/index.html#minimum-precipitation",
    "title": "UKCP Data",
    "section": "Minimum precipitation",
    "text": "Minimum precipitation\n\n\nCode\np <- full_data |> \n  ggplot(aes(min_precip, y = after_stat(density))) +\n  geom_histogram(bins = 100) +\n  scale_x_continuous(\n    limits = c(0, NA),\n    expand = expansion()\n  ) +\n  scale_y_continuous(\n    expand = expansion()\n  ) +\n  labs(\n    x = NULL,\n    y = NULL,\n    title = \"Distribution of station-wise minimum precipitation over the period\"\n  )\n\nggsave(\n  plot = p,\n  filename = \"Figures/figure3.png\",\n  width = 8, height = 0.621 * 8, scale = 1.3\n)\n\n\n\n\n\nCode\np <- full_data |> \n  ggplot(aes(proj_x, proj_y, fill = min_precip)) +\n  geom_raster(\n    interpolate = TRUE\n  ) +\n  scale_x_continuous(\n    expand = expansion(),\n    breaks = c(range(full_data$proj_x), pretty(full_data$proj_x))\n  ) +\n  scale_y_continuous(\n    expand = expansion(),\n    breaks = c(range(full_data$proj_y), pretty(full_data$proj_y))\n  ) +\n  scale_fill_viridis_c() +\n  theme(\n    # legend.position = \"top\",\n    plot.margin = margin(t = 5, r = 25, b = 5, l = 5)\n  ) +\n  labs(\n    x = \"X Projection\",\n    y = \"Y Projection\",\n    fill = \"Minimum Precipitation\",\n    title = \"Spatial distribution of minimum precipitation\"\n  )\nggsave(\n  plot = p,\n  filename = \"Figures/figure4.png\",\n  width = 8, height = 0.621 * 8, scale = 1.3\n)"
  },
  {
    "objectID": "phd/index.html",
    "href": "phd/index.html",
    "title": "About my PhD",
    "section": "",
    "text": "I’m developing and maintaining this package to go along with my PhD studies for reproducibility and to held me keep my sanity intact for the next years.\nThe main gist of my PhD research will be adding to the Max-and-Smooth method previously developed and published by my advisor, Birgir Hrafnkelsson, and others here"
  },
  {
    "objectID": "talks/hi-vefur/index.html",
    "href": "talks/hi-vefur/index.html",
    "title": "Interview on the University website",
    "section": "",
    "text": "Find the iterview here"
  },
  {
    "objectID": "talks/databeers_2022_09_16/index.html",
    "href": "talks/databeers_2022_09_16/index.html",
    "title": "Databeers #2",
    "section": "",
    "text": "The presentations were in the PechaKucha format:\n\n20 slides\n20 seconds per slide\n\n\n\nLink to the slides in full size"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "bggj",
    "section": "",
    "text": "Forest Plots with Built-In Tables\n\n\nCreating forest plots with coefficient tables in ggplot2 with cowplot\n\n\n\n\nenglish\n\n\nR\n\n\nplots\n\n\ntutorial\n\n\n\n\nI’ve seen this kind of figure poking around, but I didn’t really think about them until the other day I was asked about how to make one in R. Here I will walk through making one of these plots using the ggplot2 and cowplot packages.\n\n\n\n\n\n\nJun 28, 2022\n\n\nBrynjólfur Gauti Guðrúnar Jónsson\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Brynjólfur Gauti Guðrúnar Jónsson",
    "section": "",
    "text": "I am a statistics PhD student at the University of Iceland researching improved 21st century projections of sub-daily extreme precipitation by spatio-temporal recalibration. I also teach Statistical consulting and work at The Icelandic Heart Association."
  },
  {
    "objectID": "about.html#talks-interviews-etc.",
    "href": "about.html#talks-interviews-etc.",
    "title": "Brynjólfur Gauti Guðrúnar Jónsson",
    "section": "Talks, interviews etc.",
    "text": "Talks, interviews etc.\n\n\n\n\n\n\n\n\n\n\nDatabeers #2\n\n\nI gave a talk at the 2nd Databeers event hosted by Lucinity. There I talked about open data and helping people make sense of official or press statements by putting them…\n\n\n\n\n\n\nSep 16, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInterview on the University website\n\n\nHalldór Marteinsson interviewed me for the University of Iceland website about statistics, covid-19 predictions and more.\n\n\n\n\n\n\nDec 22, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStanCon2020: COVID-19 Prediction Model\n\n\nI gave a talk about the statistical methodology behind the prediction model used by the Icelandic government during the first wave of the COVID-19 pandemic.\n\n\n\n\n\n\nAug 13, 2020\n\n\n\n\n\n\n\n\nNo matching items"
  }
]