---
title: "Forest Plot Tables with the {gt} and {gtExtras} packages"
subtitle: "Creating forest plots with coefficient tables with {gt} and {gtExtras}"
description: I've seen this kind of figure poking around, but I didn't really think about them until the other day I was asked about how to make one in R. Here I will walk through making one of these tables using the {gt} and {gtExtras} packages
author: 
  - name: "Brynjólfur Gauti Guðrúnar Jónsson"
    url: "bggj.is"
    affiliation: "Tölfræði, Raunvísindadeild Háskóla Íslands"
    affiliation-url: "https://www.hi.is/tolfraedi_0"
date: "2024/04/15"
draft: true
format: 
    html:
        code-fold: show
        toc: false
        page-layout: full
execute: 
  echo: true
  warning: false
editor: source
categories:
    - english
    - R
    - plots
    - tutorial
image: "featured.png"
twitter-card:
    image: "featured.png"
---


```{r setup}
library(tidyverse)
library(gt)
library(gtExtras)
```

```{r, echo = FALSE}
library(tidyverse)
library(gt)
library(gtExtras)
library(broom)

d <- crossing(
  time = 1:3,
  group = c("A", "B"),
  term = c("age", "sex", "treatment")
) |> 
  mutate(
    estimate = rnorm(n()),
    se = abs(rnorm(n())),
    lower = estimate - 1.96 * se,
    upper = estimate + 1.96 * se,
    p.value = 1 - pnorm(abs(estimate), mean = 0, sd = se)
  )
```

```{r}
set.seed(1)
d <- crossing(
  sex = c("male", "female"),
  age = seq(30, 60, length.out = 5),
  group = c("case", "control")
) |> 
  mutate(
    y = rnorm(n()) + (sex == "male") - 0.5 * (age / 10) + (group == "case")
  )

m <- lm(y ~ age + sex + group, data = d) |> summary()
```



```{r}
tab <- m |> 
  tidy(conf.int = TRUE) |> 
  mutate(
    plot_col = estimate
  ) |> 
  gt() |> 
  cols_label(
    term = "Term",
    estimate = "Mean [95% CI]",
    p.value = "p-value",
    plot_col = ""
  ) |> 
  cols_hide(
    std.error
  ) |> 
  cols_move(
    p.value,
    after = plot_col
  ) |> 
  cols_move(
    plot_col,
    after = term
  ) |> 
  cols_merge(
    columns = c(estimate, conf.low, conf.high),
    pattern = "{1} [{2}, {3}]"
  ) |> 
  gt_plt_conf_int(
    plot_col, 
    ci_columns = c(conf.low, conf.high), 
    ref_line = 0, 
    text_size = 0
  ) |> 
  fmt_number(
    estimate:conf.high,
    decimals = 2
  ) |> 
  fmt_number(
    p.value,
    decimals = 3
  ) |> 
  text_transform(
    function(x) {
      if_else(
        str_detect(x, "[1-9]"),
        paste0("p = ", x),
        "p < 0.001"
      )
    },
    locations = cells_body(
      columns = p.value
    )
  )

tab |> 
  gtsave("featured.png")
```


```{r}
tab
```

