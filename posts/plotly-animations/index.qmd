---
title: "Making interactive animations with ggplotly"
subtitle: "Simple examples of how to use the `frame` aesthetic in `ggplotly()` for easy animations"
description: |
  I've recently been making a lot of `plotly` graphs for my Icelandic website [metill.is](https://www.metill.is/), where I look at official data on current topics. Since it is so simple to make animations with `ggplotly` I thought I might write a short tutorial on it.
author: 
    -   name: "Brynjólfur Gauti Guðrúnar Jónsson"
        url: "bggj.is"
        affiliation: "Tölfræði, Raunvísindadeild Háskóla Íslands"
        affiliation-url: "https://www.hi.is/tolfraedi_0"
date: "2023/02/06"
format: 
    html:
        code-fold: show
        toc: true
        toc-location: left
execute: 
  echo: true
  warning: false
editor: source
title-block-banner: true
image: image.png
categories:
    - english
    - R
    - ggplot
    - plotly
---

```{r setup}
library(tidyverse)
library(plotly)
library(glue)
library(mgcv)
# Some personal packages I've written with
# plot themes, functions for easily
# working with Icelandic data etc.
library(hagstofa)
library(metill)
library(visitalaneysluverds)
library(bggjphd)

theme_set(theme_bggj())
```

```{r get_data}
#| echo: false
url <- "https://px.hagstofa.is:443/pxis/api/v1/is/Samfelag/launogtekjur/3_tekjur/1_tekjur_skattframtol/TEK01006.px"

heildartekjur <- hg_data(url) |> 
  filter(
    Kyn == "Allir",
    str_detect(Eining, "%|Meðaltal"),
    Aldur %in% c("16 - 24 ára", "25 - 54 ára", "55 - 74 ára", "75 ára og eldri")
  ) |> 
  collect() |> 
  janitor::clean_names() |> 
  rename(
    tekjur = 5
  ) |> 
  select(-kyn) |> 
  pivot_wider(names_from = eining, values_from = tekjur) |> 
  pivot_longer(c(contains("%")), names_to = "eining", values_to = "tekjur") |> 
  mutate(
    ar = parse_number(ar),
    eining = parse_number(eining),
    tegund = "heildartekjur"
  ) |> 
  janitor::clean_names() |> 
  rename(
    medaltal = medaltal_skilyrt
  ) |> 
  select(ar, aldur, eining, tegund, everything()) 

url <- "https://px.hagstofa.is:443/pxis/api/v1/is/Samfelag/launogtekjur/3_tekjur/1_tekjur_skattframtol/TEK01007.px"

atvinnutekjur <- hg_data(url) |> 
  filter(
    Kyn == "Allir",
    str_detect(Eining, "%|Meðaltal"),
    Aldur %in% c("16 - 24 ára", "25 - 54 ára", "55 - 74 ára", "75 ára og eldri")
  ) |> 
  collect() |> 
  janitor::clean_names() |> 
  rename(
    tekjur = 5
  ) |> 
  select(-kyn) |> 
  pivot_wider(names_from = eining, values_from = tekjur) |> 
  pivot_longer(c(contains("%")), names_to = "eining", values_to = "tekjur") |> 
  mutate(
    ar = parse_number(ar),
    eining = parse_number(eining),
    tegund = "atvinnutekjur"
  ) |> 
  janitor::clean_names() |> 
  rename(
    medaltal = medaltal_skilyrt
  ) |> 
  select(ar, aldur, eining,tegund, everything())  

d <- bind_rows(
  heildartekjur,
  atvinnutekjur
) |> 
  mutate(
    tekjur = vnv_convert(tekjur, obs_date = ar),
    medaltal = vnv_convert(medaltal, obs_date = ar),
    breyting = tekjur / tekjur[ar == min(ar)] - 1,
    medaltal_breyting =  medaltal /  medaltal[ar == min(ar)] - 1,
    .by = c(aldur, eining, tegund)
  ) |> 
  filter(ar > min(ar), eining != 95) |> 
  mutate(
    aldur = str_replace(aldur, "ára", "Years Old") |> str_replace("og eldri", "and Older"),
    tegund = ifelse(tegund == "heildartekjur", "Total Income", "Salary Income")
  ) |> 
  rename(
    year = ar,
    age = aldur,
    quantile = eining,
    type = tegund,
    mean_income = medaltal,
    group_income = tekjur,
    group_change = breyting,
    mean_change = medaltal_breyting
  ) |> 
  filter(quantile != 95)
```

# Animations with `ggplotly()`

## Simple example

If you assign a variable to the `frame` aesthetic when making `ggplot2` plots, `ggplotly()` will automatically create an animation slider and button using that variable. 

```{r}
p <- mtcars |> 
  ggplot(aes(x = wt, y = mpg, frame = cyl)) +
  geom_point() +
  labs(
    title = "Example with mtcars"
  )

ggplotly(p)
```


## Effect of `gamma` on GAMM smoothness

The `gam()` function from the package `mgcv` package has an input called `gamma`. The documentation has this to say:

> Increase this beyond 1 to produce smoother models. gamma multiplies the effective degrees of freedom in the GCV or UBRE/AIC. coden/gamma can be viewed as an effective sample size in the GCV score, and this also enables it to be used with REML/ML. Ignored with P-RE/ML or the efs optimizer.

In the code below I fit multiple `mgcv::gam()` models with varying `gamma` parameters. I then use `gamma` as the frames for a `ggplotly` animation to see its effects on smoothness.

```{r}
wt_range <- range(mtcars$wt)
wt_seq <- seq(wt_range[1], wt_range[2], length.out = 70)

pred_dat <- mtcars |> 
  crossing(
    gamma = exp(seq(-4, 1, length.out = 15))
  ) |> 
  nest(data = -gamma) |> 
  mutate(
    model = map2(gamma, data, ~ gam(mpg ~ s(wt), data = .y, gamma = .x, method = "REML")),
    preds = map(model, broom::augment, newdata = tibble(wt = wt_seq))
  ) |> 
  unnest(preds) |> 
  select(gamma, wt, .fitted)

p <- ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_point() +
  geom_line(
    data = pred_dat,
    aes(x = wt, y = .fitted, frame = gamma)
  ) +
  labs(
    title = "Animating different parameter values"
  )

ggplotly(p) 
```


# Icelandic Income Data

## About the Data

I won't go into detail about how I created the dataset. Let's just imagine that we are handed data on total and salaried income for Icelanders by age-group and income bracket *(quantile)*.

```{r}
d |> 
  glimpse()
```

## Plotting

### Labels and tooltips

The first step is to create fancy tooltips to pipe into plotly. These can be assigned to aesthetics *(I use the aesthetic name `text`)*, and then we tell `ggplotly()` by writing, for example, `ggplotly(tooltip = "text")`. I've output examples of how the formatted tooltip text looks below.

```{r}
plot_dat <- d |> 
  mutate(
    label = ifelse((quantile == 10) & (age == "16 - 24 Years Old") & (type == "Salary Income"),
                   "Change of mean income for age group", 
                   NA_character_),
    text = glue(str_c(
      "<b>Quantile: {quantile}%</b>", "\n",
      "Year: {year}", "\n",
      "Income (yearly): {isk(group_income * 1e3, scale = 1e-6)}", "\n",
      "Income (monthly): {isk(group_income/12 * 1e3, scale = 1e-3)}"
    ))
  )

plot_dat |> 
  slice(1:2) |> 
  pull(text)
```

### ggplot

Next we create the `ggplot()` object. It will not look very good, since all the frames are plotted together.

Things to note here:

* The percent change variables are between 0 and 1, i.e. percentages. I want to use a log-scale such that -50% will be as far away from 0 as +100%. To do this I add 1 to the percentages and use a custom labeling function, `labels = function(x) percent(x - 1)`, in `scale_y_continuous()`. This means that no change in the y-variable is represented by 1 in the data but 0 in the plot.
* I capitalized the `year` variable beforehand. I could change the labeling of the animation slider after the fact, but I find this to be quicker. 
* There are some differences between `ggplot` and `ggplotly` output when it comes to text sizes and aspect ratios, so it's good to tune the sizing after the animation is ready.

```{r}
#| column: screen-inset
#| out-width: 100%
#| fig-asp: 0.5
#| fig-width: 15

p <- plot_dat |> 
  rename(Year = year) |> 
  ggplot(aes(quantile, group_change + 1, frame = Year, text = text)) + 
  geom_hline(yintercept = 1, lty = 2, alpha = 0.4, linewidth = 0.4) +
  geom_hline(
    aes(yintercept = mean_change + 1, frame = Year),
    alpha = 0.5,
    lty = 3,
    colour = "#e41a1c"
  ) +
  geom_text(
    aes(
      x = 45, 
      y = (mean_change + 1) * 1.15,
      label = label
    ),
    hjust = 0, vjust = 1,
    colour = "#e41a1c"
  ) +
  geom_point() +
  geom_segment(aes(xend = quantile, yend = 1), lty = 2, alpha = 0.5) +
  scale_x_continuous(
    breaks = c(seq(10, 90, by = 10), 99),
    labels = label_number(suffix = "%")
  ) +
  scale_y_continuous(
    labels = function(x) percent(x - 1),
    trans = "log10"
  ) +
  facet_grid(cols = vars(age), rows = vars(type)) +
  labs(
    x = "Income Quantile",
    y = "Percent change since 1990",
    title = "How has total and salary income changed by age-groups and income-brackets since 1990? (Adjusted for inflation)"
  )

p
```


### ggplotly

Next we use this `ggplot()` object as an input into `ggplotly()`, letting it know that the tooltip can be found in the aesthetic we called `text`.

```{r}
#| column: screen-inset
#| out-width: 100%
#| fig-asp: 1.2


ggplotly(p, tooltip = "text")
```


# Further Reading

For further reading on using the `plotly` package, check out the free and awesome book by Carson Sievert at [plotly-r.com](https://www.plotly-r.com).
